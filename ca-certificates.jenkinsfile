node {
  def kubectlImageTag = 'v1.11.4'
  def nav_cert_env = "prod"
  def environments = ['nais-ci', 'nais-dev', 'preprod-fss', 'preprod-sbs', 'prod-fss', 'prod-sbs']

  stage("Git clone repos") {
    dir("nsync") {
      git(url: "git@github.com:navikt/nsync.git")
    }

    dir("ca-certificates") {
      git(credentialsId: 'ca-certificates', url: "git@github.com:navikt/ca-certificates.git")
    }

    dir("nais-inventory") {
      git(credentialsId: 'nais-inventory', url: "git@github.com:navikt/nais-inventory.git")
    }

    dir("nais-yaml") {
	git(credentialsId: 'nais-yaml', url: "git@github.com:navikt/nais-yaml.git")
    }
  }

  stage("Downloading, checking, and commiting new certificates") {
    withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088', 'NO_PROXY=adeo.no']) {
      sshagent(['ca-certificates']) {
        sh("""
          set +e
          cd ca-certificates
          curl --ipv4 --remote-name https://curl.haxx.se/ca/cacert.pem.sha256
          sha256sum --check cacert.pem.sha256
          if [ \$? -ne 0 ]; then
            curl --ipv4 --remote-name https://curl.haxx.se/ca/cacert.pem
            sha256sum --check cacert.pem.sha256 || exit 1
            set -e
            git commit cacert.pem -m "CA certificates automatically updated to upstream [skip ci]"
            git push origin master
          fi
        """)
      }
    }
  }

  environments.each { cluster ->
    if (cluster.startsWith("preprod-") || cluster.startsWith("dev-")) {
      nav_cert_env = "all"
    }

    stage("fetch kubeconfig for ${cluster}") {
      sh("ansible-playbook -i ./nais-inventory/${cluster} ./nsync/fetch-kube-config.yaml")
    }

    stage("apply certificate bundle in ${cluster}") {
      sh("./ca-certificates/install-certs.sh ./ca-certificates/nav-cert-bundle/ ${nav_cert_env}")
      sh("cat ./ca-certificates/cacert.pem ./ca-certificates/nav-cert-bundle/* | ./ca-certificates/mk-k8s-cm.sh > ./ca-certificates/configmap.yaml")
      // Use of --force is required because we cannot use `kubectl apply`, due to
      // the binary part of the ConfigMap being too big to save in annotations.
      sh("""
        namespaces=\$(sudo docker run -v \$(pwd)/nais-yaml/vars/${cluster}:/workdir mikefarah/yq:2.1.2 yq r namespaces.yaml 'namespaces.*.name' | awk '{print \$2}')
        while read -r namespace; do
          sudo docker run -v \$(pwd)/ca-certificates:/workdir -v \$(pwd)/nsync/${cluster}/config:/root/.kube/config lachlanevenson/k8s-kubectl:${kubectlImageTag} replace --force --namespace \${namespace} --filename /workdir/configmap.yaml
        done <<< "\${namespaces}"
      """)
    }

    stage("Removing ${cluster} kubeconfig") {
      sh("rm -r ./nsync/${cluster}")
    }
  }
}
